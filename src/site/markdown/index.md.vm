#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')
#set($h5 = '#####')
#set($h6 = '######')

$h3 About
`${project.artifactId}` is a fluent, object-oriented Java API for [YouTrack](https://www.jetbrains.com/youtrack/), tested against version `${youtrackVersion}`. It has just one dependency: Apache's [HttpClient](https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient) version `4.5.x`.

**Note:** the API is currently unstable as we approach our [first milestone](https://github.com/llorllale/youtrack-api/milestone/1).

View the [usage](./usage.html) and the [javadoc](./apidocs/index.html) resources for additional details.

For bugs or enhancements, please use our [issue tracker](${project.url}/issues).

<br/>

$h4 Snippet

    final YouTrack youtrack = new DefaultYouTrack(
        new PermanentTokenLogin("your_token").login()   //login
    );
    
    youtrack.projects()
        .stream()                                        //stream of all projects
        .filter(p -> p.id().equals("project_id"))
        .get()
        .issues()                                 
        .create("summary", "description") //create issue for the selected project
        .comments()
        .post("This is my first comment!");              //posts a comment to the newly created issue

<br/>

$h4 Goals
The goals of this project include:

* Provide a complete API in Java centered on the **user** (eg. the developer). This means that admin features are out of scope.
* Faithfully follow YouTrack's model and paradigms.
* Provide a fluent interface to access YouTrack's features.
* Implement the best OOP design practices.
* High quality by providing extensive test coverage and documentation.
* Give back to the community by open-sourcing this project (we use [Apache License v2.0](LICENSE)).

It is worth noting that **performance is not a goal** of this project.

<br/>

$h4 Why another Java YouTrack API?
Of the few other Java API projects for YouTrack that seem anywhere remotely "complete", all are lacking several of the following aspects:

* Fluency
* OOP (`DTO` is the backbone of their design philosophy)
* Incorrect modeling
* Immutability
* Documentation (including licensing)
* Tests (unit + integration)
* Project activity

<br/>

$h4 Include in maven projects

    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>${project.artifactId}</artifactId>
      <version>${project.version}</version>
    </dependency>
